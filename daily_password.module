<?php

use Drupal\daily_password\Plugin\Block;

/**
 * Load User and Change is password
 *
 * @param $userNames
 * @param $password
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */


function _daily_password_password_change($userNames, $password) {


  foreach ($userNames as $name) {
    // Get user storage object.
    $user_storage = \Drupal::EntityTypeManager()->getStorage('user');

    // Load user by their user name
    $users = $user_storage->loadByProperties(['name' => $name]);


    // check we got 1 (only 1) user
    if (count($users) == 1) {
      //get the user from the array.
      $user = reset($users);
      $user->setPassword($password);
      $user->save();
    } else {
      \Drupal::logger('daily_password')->error('Username "'.$name.'" is incorrect or does not exists' );
    }
  }

}

/**
 * Generate a random password
 *
 * @param int $length
 *
 * @return string
 * @throws \Exception
 */

function _daily_password_password_generator($length = 8) {

  $chars =  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
    '0123456789';

  $str = '';
  $max = strlen($chars) - 1;

  for ($i=0; $i < $length; $i++)
    $str .= $chars[random_int(0, $max)];

  return $str;

}

/**
 * Get user names from daily_password database table
 *
 * @return mixed
 */

function _daily_password_get_user_names() {


  $query = \Drupal::database()->select('daily_password', 'n');
  $query->fields('n', ['pid', 'usernames', 'frequency']);
  return $results = $query->execute()->fetchAll();

}


/**
 * Store new password in daily_password database table
 *
 * @param $pid
 * @param $password
 */
function _daily_password_store_password($pid, $password) {
  $query = \Drupal::database()->update('{daily_password}');
  $query->fields([
    'password' => $password,
  ]);
  $query->condition('pid', $pid);
  $query->execute();
}

/**
 * Combine all the functions together
 *
 * @param $userNames
 * @param $userPass
 * @param $pid
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _daily_password_password_setter($userNames,  $pid) {
  // Get hash from daily_password.settings
  //$hash = \Drupal::config('daily_password.settings')->get('password_hash');

  // Get hash from setting.php
  $hash =  \Drupal\Core\Site\Settings::getHashSalt();

  //generate new password
  $userPass = _daily_password_password_generator();

  //hash the password
  $hashedPassword = openssl_encrypt($userPass,"AES-256-ECB",$hash);

  //trim and store as array for multiple usernames to pass into the function
  $userNames = array_map('trim', explode(',', $userNames));


  //store password in database
  _daily_password_store_password($pid, $hashedPassword);


  //run password change function
  _daily_password_password_change($userNames, $userPass);
}

/**
 * Cron filter function per config
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _daily_password_cron_filter() {

  $midnight = strtotime('today midnight');

  //Set run time stamp on config file
  \Drupal::getContainer()->get('config.factory')->getEditable('daily_password.settings')->set('last_run', $midnight)->save();

  // Call usernames from database and store the object
  $tableObjects =  _daily_password_get_user_names();

  //iterate over usernames object
  foreach ($tableObjects as $object) {
    //If set for Daily this will always run
    if ($object->frequency == 'Daily') {

      // Apply and store password
      _daily_password_password_setter($object->usernames, $object->pid);

    }
    //If set for Weekly this will run too
    if ($object->frequency == 'Weekly' && date('D') == 'Sun') {

      // Apply and store password
      _daily_password_password_setter($object->usernames, $object->pid);

    }
    //If set for Monthly this will run too
    if ($object->frequency == 'Monthly' && date('d') == 01) {

      // Apply and store password
      _daily_password_password_setter($object->usernames, $object->pid);

    }
    //If set for Yearly this will run too
    if ($object->frequency == 'Yearly' && date('z') == 0) {

      // Apply and store password
      _daily_password_password_setter($object->usernames, $object->pid);

    }

  }
}

/**
 * Cron time check
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _daily_password_cron_helper() {
  //get configuration last run time stamp
  $getSettingsLastRun = \Drupal::config('daily_password.settings')->get('last_run');

  /**
   * check for last run and configure day to run
   */
  if($getSettingsLastRun > strtotime('-1 days') ) {
    return;
  } else if($getSettingsLastRun < strtotime('-1 days')) {

    // Run all functions
    _daily_password_cron_filter();

    //clear render cache so block will display up to date information
    $renderCache = \Drupal::service('cache.render');
    $renderCache->invalidateAll();

  } else {
    return;
  }
}


/**
 * Sets up cron task
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function daily_password_cron() {
  _daily_password_cron_helper();

}




/**
 * Implements hook_theme().
 */
function daily_password_theme() {
  return array(
    'block__daily_password' => array(
      'base hook' => 'block'
    ),
  );

}

